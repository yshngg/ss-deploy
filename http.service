# Minimal HTTP "pong" server using netcat (inline shell loop).
# This unit embeds a tiny bash loop that accepts one connection at a time,
# writes a minimal HTTP response "pong", then closes and repeats.
#
# Notes:
# - Binding port 80 requires root or CAP_NET_BIND_SERVICE.
# - This implementation is single-connection-at-a-time (not concurrent).
# - For production or high concurrency use a small HTTP binary or socket-activated unit.

[Unit]
Description=Minimal HTTP server (netcat, inline command)
Documentation=man:nc(1)
After=network.target
Wants=network-online.target

# Protect against rapid crash loops
StartLimitIntervalSec=60
StartLimitBurst=5

[Service]
# simple: main process is the one started by ExecStart
Type=simple

# Default port. Change to 8080 (or >=1024) to run as non-root without capabilities.
Environment=PORT=80

# If you want the service to run unprivileged, uncomment and set an appropriate user,
# and change PORT to a non-privileged value (>=1024).
# User=www-data

# Pre-flight checks: fail early if nc binary or bash are missing.
ExecStartPre=/usr/bin/test -x /bin/bash
ExecStartPre=/bin/bash -lc 'command -v nc >/dev/null'

# ExecStart: inline bash loop that.
# We do not swallow stderr here so failures are visible in the journal.
ExecStart=/bin/bash -c '\
  while true; do \
    echo -ne "HTTP/1.1 200 OK\r\nContent-Length: 12\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\nHello World!" \
      | nc -l "$PORT"; \
  done'

# Behavior on stop / restart
Restart=on-failure        # restart only on non-zero exit (avoid tight always-restart loops)
RestartSec=5s
TimeoutStopSec=10s
KillMode=control-group    # ensure child processes are killed on stop

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=pong-nc

# Allow binding low ports without being root (optional; keep if you run PORT=80 as non-root user)
# If you set User=<non-root> and keep CAP_NET_BIND_SERVICE, the binary can bind privileged ports.
CapabilityBoundingSet=CAP_NET_BIND_SERVICE
AmbientCapabilities=CAP_NET_BIND_SERVICE

# Security hardening (safe defaults for a simple network service)
NoNewPrivileges=true
ProtectSystem=full            # make /usr and /boot read-only for the service
ProtectHome=true              # hide /home and /root
PrivateTmp=true               # give the service its own /tmp
PrivateDevices=true           # deny access to raw devices
MemoryDenyWriteExecute=true   # disallow writable+executable mappings

# Tune file descriptor limit if you expect many simultaneous sockets (optional)
LimitNOFILE=8192

[Install]
WantedBy=multi-user.target
